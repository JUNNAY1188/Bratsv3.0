# -*- coding: utf-8 -*-
"""bratsv3.0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bnNqfUTW62CAD75Vmewd7Xx_YJFSfZrI
"""

# Commented out IPython magic to ensure Python compatibility.
#Import the necessary libraries
import numpy as np
import pandas as pd
import os
from google.colab import drive
import cv2
import matplotlib.pyplot as plt
import os
#Import TensorFlow and Keras
import tensorflow as tf
from tensorflow import keras
from PIL import Image
#Import scikit-learn for train-test split and preprocessing
from sklearn.model_selection import train_test_split
from tensorflow.keras.utils import normalize
#Import Keras for building the neural network
from keras.models import Sequential
from keras.layers import Conv2D, MaxPooling2D
from keras.layers import Activation, Dropout, Flatten, Dense
from tensorflow.keras.utils import to_categorical
#to display plots inline in the notebook
# %matplotlib inline

drive.mount("/content/drive", force_remount=True)

import os
for dirname, _, filenames in os.walk('/content/drive/MyDrive/br35h/'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

# Get the path of files
image_directory='/content/drive/MyDrive/br35h/'

no_tumor_images=os.listdir(image_directory+'no/')
yes_tumor_images=os.listdir(image_directory+'yes/')
# initialize dataset and label arrays
dataset=[]
label=[]
# set input size
INPUT_SIZE=64

#loop over each image in each category


for i , image_name in enumerate(no_tumor_images):
    #read the image if its extension is .jpg
    if(image_name.split('.')[1]=='jpg'):
        image=cv2.imread(image_directory+'no/'+image_name)
        image=Image.fromarray(image,'RGB')
        #resize the image
        image=image.resize((INPUT_SIZE,INPUT_SIZE))
        #append image array in dataset list and its label in label list
        dataset.append(np.array(image))
        # we Store images that are not infected by brain tumor in 0 as label in label array
        label.append(0)

        # same for yes images
for i , image_name in enumerate(yes_tumor_images):
    if(image_name.split('.')[1]=='jpg'):
        image=cv2.imread(image_directory+'yes/'+image_name)
        image=Image.fromarray(image, 'RGB')
        image=image.resize((INPUT_SIZE,INPUT_SIZE))
        dataset.append(np.array(image))
          # we Store images that are infected by brain tumor in 1 as label in label array
        label.append(1)

dataset=np.array(dataset)
label=np.array(label)

#to show image in dataset
plt.imshow(image)

#print(dataset)
print(label)
print(len(label))

# Convert the dataset & label to numpy array
dataset = np.array(dataset)
label = np.array(label)

#Split the dataset and labels into training and testing sets
#80% of the data is used for training and 20% is used for testing
x_train, x_test, y_train, y_test = train_test_split(dataset, label, test_size = 0.2, random_state = 42)

print(x_train.shape)
print(y_train.shape)

print(x_test.shape)
print(y_test.shape)

# Normalise the data for training purpose
x_train = normalize( x_train, axis =1)
x_test = normalize( x_test, axis =1)

#y_train = to_categorical(y_train, num_classes=2)
#y_test = to_categorical(y_test, num_classes=2)
#print(y_train.shape)

# Building a CNN model
model = Sequential()
#layer 1 :
#32=number of filters. each filter has 3 width and 3 height
model.add(Conv2D(32, (3,3), input_shape = (INPUT_SIZE, INPUT_SIZE, 3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2,2)))
#layer 2 :
model.add(Conv2D(32, (3,3), kernel_initializer = 'he_uniform'))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2,2)))
#layer 3 :
model.add(Conv2D(64, (3,3),  kernel_initializer = 'he_uniform'))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2,2)))

model.add(Flatten())
model.add(Dense(64))
model.add(Activation('relu'))
model.add(Dropout(0.5))
model.add(Dense(1))
#model.add(Dense(2))
# 'sigmoid' to binary classification 'softmax' to multi classification
model.add(Activation('sigmoid')) #to full connection for layer in CNN
# model.add(Activation('softmax'))
model.summary()

model.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])

model.fit(x_train, y_train, batch_size = 16, verbose = 1, epochs = 10, validation_data = (x_test, y_test),shuffle = 'False')

# Evaluate the model on the test data and print the accuracy
loss, accuracy = model.evaluate(x_test, y_test)
print('Accuracy on test data:', accuracy)

model.save('Brain Tumor detection.h5')

# Testing the model
import cv2
from keras.models import load_model
from PIL import Image
import numpy as np

model = load_model('Brain Tumor detection.h5')

# Testing on one image
image = cv2.imread('/content/drive/MyDrive/br35h/pred/pred4.jpg') # no tumor detected
img = Image.fromarray(image)
img = img.resize((64,64))
img = np.array(img)
print(img)

input_img = np.expand_dims(img, axis=0)

result = model.predict(input_img)
print(result)
# the result is 0 that means the image not infected by brain tumor

# Testing on one image
image = cv2.imread('/content/drive/MyDrive/br35h/pred/pred7.jpg') # tumor detected
img = Image.fromarray(image)
img = img.resize((64,64))
img = np.array(img)
print(img)

input_img = np.expand_dims(img, axis=0)

result = model.predict(input_img)
print(result)
# the result is 1 that means the image infected by brain tumor

#this part of code to convert the trained model to tflite  to use it into (android studio )
from keras.models import load_model

model = load_model('Brain Tumor detection.h5')
converter = tf.lite.TFLiteConverter.from_keras_model(model)

tf_lite_model = converter.convert()

with open('model.tflite', 'wb') as f:
      f.write(tf_lite_model)